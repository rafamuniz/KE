@using KarmicEnergy.Web.Areas.Customer.ViewModels.Tank
@using KarmicEnergy.Web.Extensions
@using Munizoft.Extensions

@model EditViewModel

@{
    Layout = "~/Views/Shared/_Internal.cshtml";
    ViewBag.Title = "Tank - Edit";
}

@using (Html.BeginForm("Edit", "Tank", new { area = "Customer" }, FormMethod.Post, new { id = "form", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)

    <div class="row">
        <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6">
            @if (!this.IsSite())
            {
                <div class="form-group">
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                        @Html.DropDownListFor(m => m.SiteId, new SelectList(ViewBag.Sites, "Id", "Name"), "-- Please select a Site --", new { @class = "form-control selectpicker", @id = "ddlSite" })
                        @Html.ValidationMessageFor(m => m.SiteId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(m => m.SiteId)
            }

            <div class="form-group">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", placeholder = AttributeExtension.GetDisplayAttributeNameValue<EditViewModel>(m => m.Name) } })
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    @Html.EditorFor(m => m.Reference, new { htmlAttributes = new { @class = "form-control", placeholder = AttributeExtension.GetDisplayAttributeNameValue<EditViewModel>(m => m.Reference) } })
                    @Html.ValidationMessageFor(m => m.Reference, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    @Html.TextAreaFor(m => m.Description, new { @class = "form-control", placeholder = AttributeExtension.GetDisplayAttributeNameValue<EditViewModel>(m => m.Description) })
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    @Html.DropDownListFor(m => m.TankModelId, new SelectList(ViewBag.TankModels, "Id", "Name"), "-- Please select a Tank Model --", new { @class = "form-control selectpicker", @id = "ddlTankModel", @onchange = "showTankModel();" })
                    @Html.ValidationMessageFor(m => m.TankModelId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    @Html.DropDownListFor(m => m.StickConversionId, new SelectList(ViewBag.StickConversions, "Id", "Name"), "-- Please select a Stick Conversion --", new { @class = "form-control selectpicker", @id = "ddlStickConversion" })
                    @Html.ValidationMessageFor(m => m.StickConversionId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    @Html.DropDownListFor(model => model.Status, new SelectList(ViewBag.Statuses, "Id", "Name", "A"), "-- Please select a Status --", new { @class = "form-control selectpicker", id = "ddlStatus" })
                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-xs-9 col-sm-9 col-md-9 col-lg-9 col-xl-9">
                    <div class="form-group">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                            @Html.EditorFor(m => m.Latitude, new { htmlAttributes = new { @class = "form-control", id = "txtLatitude", placeholder = AttributeExtension.GetDisplayAttributeNameValue<EditViewModel>(m => m.Latitude) } })
                            @Html.ValidationMessageFor(m => m.Latitude, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
                            @Html.EditorFor(m => m.Longitude, new { htmlAttributes = new { @class = "form-control", id = "txtLongitude", placeholder = AttributeExtension.GetDisplayAttributeNameValue<EditViewModel>(m => m.Longitude) } })
                            @Html.ValidationMessageFor(m => m.Longitude, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 col-xl-3">
                    <a id="archorMap" style="display: none;" href="http://maps.google.com/?q=@Model.Latitude,@Model.Longitude" target="_blank">
                        <img id="imgMap" src="~/images/map_icon.png" style="width: 100%; height: 100%;" />
                    </a>
                </div>
            </div>
        </div>

        <div id="tankModel" class="col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6">
            @Html.Partial("_TankModel", Model.TankModel, new ViewDataDictionary() { TemplateInfo = new TemplateInfo() { HtmlFieldPrefix = "TankModel" } })
        </div>
    </div>

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 text-center btn-submit">
        <input type="submit" class="btn btn-default" value="SAVE">
        <a class="btn" href="/Customer/Tank/">Cancel</a>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/app/tank.js"></script>

    <script type="text/javascript">
        $(function () {
            var tank = {};
            tank.Height = @Model.Height;
            tank.Width = @Model.Width;
            tank.Length = @Model.Length;
            @*if (@Model.FaceLength != null){
                tank.FaceLength = @Model.FaceLength;
            }
            else
                tank.FaceLength = 0;
            tank.BottomWidth = @Model.BottomWidth;*@
            tank.WaterVolumeCapacity = @Model.WaterVolumeCapacity;
            @*tank.Dimension1 = @Model.Dimension1;
            tank.Dimension2 = @Model.Dimension2;
            tank.Dimension3 = @Model.Dimension3;*@
            tank.MinimumDistance = @Model.MinimumDistance;
            tank.MaximumDistance = @Model.MaximumDistance;

            getTankModel(tank);
        });

        function geoLocationSuccess(pos) {
            var crd = pos.coords;
            var urlLocation = 'http://maps.google.com/?q=' + crd.latitude + ',' + crd.longitude;
            $('#txtLatitude').val(crd.latitude);
            $('#txtLongitude').val(crd.longitude);

            $('#archorMap').attr("href", urlLocation);
            $('#archorMap').visible();
        };

        function geoLocationError(err) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    notifiyError("User denied the request for Geolocation.")
                    break;
                case error.POSITION_UNAVAILABLE:
                    notifiyError("Location information is unavailable.")
                    break;
                case error.TIMEOUT:
                    notifiyError("The request to get user location timed out.")
                    break;
                case error.UNKNOWN_ERROR:
                    notifiyError("An unknown error occurred.")
                    break;
            }
        };
    </script>
}
