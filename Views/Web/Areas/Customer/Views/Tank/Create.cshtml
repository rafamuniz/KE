@using KarmicEnergy.Web.Areas.Customer.ViewModels.Tank
@using Munizoft.Extensions
@using Munizoft.MVC.Helpers
@using KarmicEnergy.Web.Extensions

@model CreateViewModel

@{
    Layout = "~/Views/Shared/_Internal.cshtml";
    ViewBag.Title = "Tank - Create";
}

@using (Html.BeginForm("Create", "Tank", new { area = "Customer" }, FormMethod.Post, new { id = "formCreateTank", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6">
            @if (!this.IsSite())
            {
                <div class="form-group">
                    <div class="col-md-2">
                        @Html.LabelFor(m => m.SiteId, new { @class = "control-label" })
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.SiteId, new SelectList(ViewBag.Sites, "Id", "Name", Model.SiteId), "-- Please select a Site --", new { @class = "form-control selectpicker", @id = "ddlSite" })
                        @Html.ValidationMessageFor(m => m.SiteId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(m => m.SiteId)
            }

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(m => m.Name, new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(m => m.Reference, new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(m => m.Reference, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Reference, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(m => m.Description, new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-3 col-md-2 col-xs-1">
                    @Html.LabelFor(m => m.TankModelId, new { @class = "control-label" })
                </div>
                <div class="col-sm-9 col-md-10 col-xs-11">
                    @Html.DropDownListFor(m => m.TankModelId, new SelectList(ViewBag.TankModels, "Id", "Name"), "-- Please select a Tank Model --", new { @class = "form-control selectpicker", @id = "ddlTankModel", @onchange = "getTankModel();" })
                    @Html.ValidationMessageFor(m => m.TankModelId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-3 col-md-2 col-xs-1">
                    @Html.LabelFor(m => m.StickConversionId, new { @class = "control-label" })
                </div>
                <div class="col-sm-9 col-md-10 col-xs-11">
                    @Html.DropDownListFor(m => m.StickConversionId, new SelectList(ViewBag.StickConversions, "Id", "Name"), "-- Please select a Stick Conversion --", new { @class = "form-control selectpicker", @id = "ddlStickConversion" })
                    @*@Html.ValidationMessageFor(m => m.StickConversionId, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(m => m.Status, new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Status, new SelectList(ViewBag.Statuses, "Id", "Name", "A"), "-- Please select a Status --", new { @class = "form-control selectpicker", id = "ddlStatus" })
                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-10 col-lg-10">
                    <div class="form-group">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.Latitude, new { @class = "control-label" })
                        </div>
                        <div class="col-md-10">
                            @Html.EditorFor(m => m.Latitude, new { htmlAttributes = new { @class = "form-control", id = "txtLatitude" } })
                            @Html.ValidationMessageFor(m => m.Latitude, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.Longitude, new { @class = "control-label" })
                        </div>
                        <div class="col-md-10">
                            @Html.EditorFor(m => m.Longitude, new { htmlAttributes = new { @class = "form-control", id = "txtLongitude" } })
                            @Html.ValidationMessageFor(m => m.Longitude, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-2 col-lg-2">
                    <a id="archorMap" style="display: none;" target="_blank">
                        <img id="imgMap" src="~/images/map_icon.png" style="width: 100%; height: 100%;" />
                    </a>
                </div>
            </div>
        </div>

        <div id="tankModel" class="col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6">
            @Html.Partial("_TankModel", Model.TankModelViewModel)
        </div>
    </div>

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 text-center btn-submit">
        <input type="submit" class="btn btn-default" value="SAVE">
        <a class="btn" href="/Customer/Tank/">Cancel</a>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/app/tank.js"></script>
    <script type="text/javascript">
        $(function () {
            showTankModel(null);
            getGeoLocation(geoLocationSuccess, geoLocationError);
        })

        function geoLocationSuccess(pos) {
            var crd = pos.coords;
            var urlLocation = 'http://maps.google.com/?q=' + crd.latitude + ',' + crd.longitude;
            $('#txtLatitude').val(crd.latitude);
            $('#txtLongitude').val(crd.longitude);

            $('#archorMap').attr("href", urlLocation);
            $('#archorMap').visible();
        };

        function geoLocationError(err) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    notifiyError("User denied the request for Geolocation.")
                    break;
                case error.POSITION_UNAVAILABLE:
                    notifiyError("Location information is unavailable.")
                    break;
                case error.TIMEOUT:
                    notifiyError("The request to get user location timed out.")
                    break;
                case error.UNKNOWN_ERROR:
                    notifiyError("An unknown error occurred.")
                    break;
            }
        };
    </script>
}
